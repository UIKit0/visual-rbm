= This page is out of date and will be updated shortly =

== Overview ==

The code of VisualRBM is divided into five Visual Studio 2010 Projects:
 * FreeGLUT - Static Library
 * GLEW - Static Library
 * !QuickBoltzmannNative - Native C++ Static Library
 * !QuickBoltzmannInterop - C++/CLI DLL
 * VisualRBM - C# Executable
 
== FreeGLUT ==

A very slightly modified version of the [http://freeglut.sourceforge.net/ FreeGLUT library].  Changed so that the background window created is hidden by default, rather than showing immediately.  Set up as a static library rather than a shared library just to minimize the number .DLLs (especially considering very little of FreeGLUT's functionality is actually used).

== GLEW ==

Unmodified version of the [http://glew.sourceforge.net/ OpenGL Extension Wrangler library] (version 1.9.0).

== !QuickBoltzmannNative ==

This project contains everything needed to embed a GPU accelerated RBM trainer in another application.  The RBMTrainer class internally manages all of the training algorithm details.  The general usage would go something like this:

{{{

// initializes opengl, loads shaders, etc
RBMTrainer trainer;
// set the training data (and optionally set the validation data)
trainer.SetTrainingData(some_idx);
// set the various model parameters (hidden units, visible unit type, etc)
// set the training parameters (learning rate, momentum, regularization)
// initialize
trainer.Initialize();  // allocates texture memory
/// perform training
for(int k = 0; k < iterations; k++)
{
   trainer.Train();
}

// get back our model
RBM* rbm = trainer.GetRBM();
// release texture memory and reset for training new model
trainer.Reset();
}}}

The only caveat is that (since we're using an OpenGL context underneath the hood), an RBMTrainer object must be accessed from the same thread it is created on.  See [http://code.google.com/p/visual-rbm/source/browse/trunk/source/VisualRBM/QuickBoltzmannNative/RBMTrainer.h RBMTrainer.h] for full method listing.

== !QuickBoltzmannInterop ==

This project exists so that the training algorithm could be implemented in an unmanaged library that can be used on other platforms.  The bulk of the code exists in the static RBMProcessor class, which is basically just a message queue that is used to forward commands from the VisualRBM UI to the !QuickBoltzmannNative training library.

== VisualRBM ==

The frontend is composed of three main user controls:
 * !SettingsBar - The main bar that provides access to all of the RBMTrainer's functionality (through the RBMProcessor).  
 * !VisualizeReconstruction - This class periodically sends requests to the RBMProcessor for the lastest minibatch and minibatch reconstructions from the RBMTrainer and displays them (along with the difference between the two). This happens in a virtual Drawing() method which is overriden in !VisualizeHiddenProbabilities and !VisualizeFeatureDetectors which handle displaying the hidden probabilities and the RBM weights.
 * !VisualizeReconstructionError - Basically just wraps a !WinForms Chart control to periodically update with reconstruction error values from the RBMProcessor.