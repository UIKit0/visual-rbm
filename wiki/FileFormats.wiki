VisualRBM and associated tools makes use of three different filetypes:

 * IDX (.idx) - binary data format used to store training data for VisualRBM
 * Model (.json) - JSON format used to store a model (RBM, !AutoEncoder, etc) trained by VisualRBM
 * Schedule (.json) - JSON format used to represent a training schedule used by VisualRBM and cltrain

-----

= IDX =

VisualRBM makes use of a slightly modified version of the IDX file-format as described at the bottom of [http://yann.lecun.com/exdb/mnist/ Yann LeCun's MNIST page].  

|| uint16_t || Endianness || 
|| uint8_t || Data Format ||
|| uint8_t || Dimensions ||
|| uint32_t || Number of Elements in Dimension 1 ||
|| ... || ... ||
|| uint32_t || Number of Elements in Dimension N ||
|| Data || 

If Endianness is 0xFFFF, then all subsequent multi-byte data will be read with the assumption it is Little-Endian.  This includes the uint32_t  'Number of Elements' fields.  If Endianness is 0x0000 (as described on Yan !LeCun's page), then all subsequent data will be read in as Big Endian.  All other aspects of the format are identical.

The allowed data formats are:

|| 0x08 || uint8_t ||
|| 0x09 || int8_t ||
|| 0x0B || int16_t ||
|| 0x0C || int32_t ||
|| 0x0D || single precision float ( 4 bytes) ||
|| 0x0E || double precision float ( 8 bytes) ||

VisualRBM will only accept IDX files whose data format is a single precision floating point.

= Model =

Since version r268, VisualRBM serializes trained models as a JSON object.  Each type of model has a different schema, but all models will have a string value called "Type" in the root object:

{{{

{
	"Type" : "ModelType",
	(Model Data)
}

}}}

Currently, allowed values for Type are "!RestrictedBoltzmannMachine" and "!MultilayerPerceptron."  


== !RestrictedBoltzmannMachine ==

The RBM format is fairly simple and has the following format:

{{{

{
	"Type" : "RestrictedBoltzmannMachine",
	"VisibleCount" : ...,
	"HiddenCount" : ...,
	"VisibleType" : ...,
	"HiddenType" : ...,
	"VisibleBiases" : [...],
	"HiddenBiases" : [...],
	"Weights" : [[...],[...],...]
}

}}}

!VisibleCount and !HiddenCount must be positive non-zero integers.  !VisibleType and !HiddenType must each be one of: "Linear," "Sigmoid," or "!RectifiedLinear."  !VisibleBiases and !HiddenBiases are arrays of numbers representing the bias vectors.  Weights is a length HiddenCount array of length !VisibleCount arrays of numbers representing the weights.

== !MultilayerPerceptron ==

The MLP format is a bit more complicated, since an MLP can have any number of layers.  MLPs have the following format:

{{{

{
	"Type" : "MultilayerPerceptron",
	"Layers" : [...]
}

}}}
 
Layers is an array of JSON objects which represent each layer of the MLP.  A layer ha sthe following format:

{{{

{
	"Inputs" : ...,
	"Outputs" : ...,
	"Function" : ...,
	"Biases" : [...],
	"Weights" : [[...],[...],...]
}

}}}

Inputs and Outputs must be positive non-zero integers.  Function must be one of: "Linear", "Sigmoid", or "!RectifiedLinear."  Biases is an array of numbers representing the output bias vector, while Weights is a length Outputs array of length Inputs arrays of numbers representing the weights.

Currently, VisualRBM serializes out the !AutoEncoder model as a !MultilayerPerceptron.  This will change in the next release !AutoEncoder support with tied weights is implemeented.  At that point, the !AutoEncoder's JSON format will be basically identical to that of the RBM.

----

= Schedule =

The training schedule allows the user to specify a model configuration and training parametrs (which can change over time).  A training schedule has the following general format:

{{{

{
	"Type" : ...,
	(Model Parameters)
	"Schedule" : 
	[
		{
			(Training Parameters),
			"Epochs" : ...
		},
		{
			(Training Parameters),
			"Epochs" : ...
		},
		...
	]
}
}}}

The Type value is common for all schedule files, and must be either "!RestrictedBoltzmannMachine" or "!AutoEncoder."  The root object must also contain all of the values found in a Model JSON file for your given type (apart from any learned weights).  That is, an RBM or an !AutoEncoder must include a !VisibleCount, !HiddenCount, !VisibleType and !HiddenType.  A schedule for training a !MultilayerPerceptron would require an array of Layer objects containing Inputs, Outputs and Function fields.

The Schedule array contains a list of objects which contain training parameters.  !AutoEncoders and RBMs use the same set of training parameters:

 * !LearningRate
 * Momentum
 * L1
 * L2
 * !VisibleDropout
 * !HiddenDropout

Training parameters can be omitted if they do not need to change.

The Epochs parameter in each Schedule object defines the number of epochs (must be an integer) to train while using the current set of training parameters.